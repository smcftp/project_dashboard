from sqlalchemy.orm import Session
from sqlalchemy.exc import SQLAlchemyError
from sqlalchemy import func, case
from decimal import Decimal

from database import models

import pandas as pd

import logging

import pandas as pd
from sqlalchemy.orm import Session
from sqlalchemy import func, cast, Numeric
from decimal import Decimal
# from . import models

def get_drawing_data_for_project(db: Session, title_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ DataFrame.

    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
    :param title_id: ID –ø—Ä–æ–µ–∫—Ç–∞ (title_id)
    :return: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [–î–∞—Ç–∞, –í—Å–µ–≥–æ —á–µ—Ä—Ç–µ–∂–µ–π, –°–ª–æ–∂–Ω–æ—Å—Ç—å, –ú–∞—Å—Å–∞, –û–±—â–∏–µ —á–∞—Å—ã, –ü–ª–∞–Ω–æ–≤–∞—è –º–∞—Å—Å–∞]
    """
    try:
        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ title_id
        if title_id is None:
            print("‚ùå –û—à–∏–±–∫–∞: `title_id` = None. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö!")
            return pd.DataFrame(columns=["–î–∞—Ç–∞", "–í—Å–µ–≥–æ —á–µ—Ä—Ç–µ–∂–µ–π"])

        # print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ title_id: {title_id}")

        # üîé –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —á–µ—Ä—Ç–µ–∂–∞—Ö
        drawing_query = (
            db.query(
                models.DrawingData.date,
                func.round(func.sum(cast(models.DrawingData.number_of_drawings, Numeric)), 0).label("total_drawings"),
                func.sum(cast(models.DrawingData.total_complexity, Numeric)).label("total_complexity"),
                func.round(func.sum(cast(models.DrawingData.total_mass, Numeric)), 2).label("total_mass"),
            )
            .filter(models.DrawingData.title_id == title_id)
            .filter(models.DrawingData.date.isnot(None))
            .group_by(models.DrawingData.date)
            .order_by(models.DrawingData.date)
        )
        drawing_result = drawing_query.all()
        # print("drawing_result", drawing_result)

        # üîé –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö
        subquery = (
            db.query(
                models.WorkHoursInTekla.date,
                models.WorkHoursInTekla.executor_id,
                func.coalesce(
                    func.max(
                        case(
                            (models.WorkHoursInTekla.hours_worked.is_(None), 0),  # NULL ‚Üí 0
                            (models.WorkHoursInTekla.hours_worked == float("NaN"), 0),  # NaN ‚Üí 0
                            (models.WorkHoursInTekla.hours_worked == Decimal("NaN"), 0),  # Decimal(NaN) ‚Üí 0
                            else_=models.WorkHoursInTekla.hours_worked,  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                        )
                    ),
                    0,  # –ï—Å–ª–∏ –≤—Å—ë –∂–µ –ø–æ–ø–∞–ª NULL
                ).label("unique_hours")
            )
            .filter(models.WorkHoursInTekla.title_id == title_id)
            .filter(models.WorkHoursInTekla.date.isnot(None))
            .group_by(models.WorkHoursInTekla.date, models.WorkHoursInTekla.executor_id)  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é
            .subquery()
        )
 
        result = db.query(subquery).all()
        # print(f"üìä –î–∞–Ω–Ω—ã–µ –≤ subquery: {result}")

        # –¢–µ–ø–µ—Ä—å –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        work_hours_query = (
            db.query(
                subquery.c.date,
                func.coalesce(func.sum(subquery.c.unique_hours), 0).label("total_hours")
            )
            .group_by(subquery.c.date)
            .order_by(subquery.c.date)
        )

        work_hours_result = work_hours_query.all()

        # üìä –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã –≤–µ—Ä–Ω—É–ª–∏ –¥–∞–Ω–Ω—ã–µ
        # print(f"üìù –î–∞–Ω–Ω—ã–µ –ø–æ —á–µ—Ä—Ç–µ–∂–∞–º: {drawing_result}")
        # print(f"‚è≥ –î–∞–Ω–Ω—ã–µ –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º: {work_hours_result}")

        # üìå –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        drawing_df = pd.DataFrame(drawing_result, columns=["–î–∞—Ç–∞", "–í—Å–µ–≥–æ —á–µ—Ä—Ç–µ–∂–µ–π", "–°–ª–æ–∂–Ω–æ—Å—Ç—å", "–ú–∞—Å—Å–∞"])
        work_hours_df = pd.DataFrame(work_hours_result, columns=["–î–∞—Ç–∞", "–û–±—â–∏–µ —á–∞—Å—ã"])

        # üõ† –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö DataFrame
        if drawing_df.empty:
            print("‚ö†Ô∏è DataFrame drawing_df –ø—É—Å—Ç! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —á–µ—Ä—Ç–µ–∂–∞—Ö.")
        if work_hours_df.empty:
            print("‚ö†Ô∏è DataFrame work_hours_df –ø—É—Å—Ç! –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–∞—Ö.")

        # üóì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫ —Å –¥–∞—Ç–∞–º–∏
        drawing_df["–î–∞—Ç–∞"] = pd.to_datetime(drawing_df["–î–∞—Ç–∞"], errors="coerce")
        work_hours_df["–î–∞—Ç–∞"] = pd.to_datetime(work_hours_df["–î–∞—Ç–∞"], errors="coerce")
        work_hours_df["–û–±—â–∏–µ —á–∞—Å—ã"] = work_hours_df["–û–±—â–∏–µ —á–∞—Å—ã"].apply(lambda x: 0 if isinstance(x, Decimal) and x.is_nan() else float(x))

        # üîÑ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ (outer join –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π)
        final_df = pd.merge(drawing_df, work_hours_df, on="–î–∞—Ç–∞", how="outer").fillna(0)

        # üìä –†–∞—Å—Å—á—ë—Ç –ø–ª–∞–Ω–æ–≤–æ–π –º–∞—Å—Å—ã (–ü—Ä–∏–º–µ—Ä: 1.6 - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        final_df["–ü–ª–∞–Ω–æ–≤–∞—è –º–∞—Å—Å–∞"] = final_df["–û–±—â–∏–µ —á–∞—Å—ã"] / 1.6

        # üõ† –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ DataFrame –ø—É—Å—Ç, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if final_df.empty:
            print("‚ùå –ò—Ç–æ–≥–æ–≤—ã–π DataFrame –ø—É—Å—Ç! –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö.")

        # print(final_df)  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
        
        return final_df

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame(columns=["–î–∞—Ç–∞", "–í—Å–µ–≥–æ —á–µ—Ä—Ç–µ–∂–µ–π"])  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π DataFrame
    finally:
        db.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ



def get_data_for_project(db: Session, title_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω—ã–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ DataFrame.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º –ø—Ä–æ–≤–µ–¥–µ–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –≤ Tekla –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ DataFrame.
    
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
    :param title_id: ID –ø—Ä–æ–µ–∫—Ç–∞ (title_id)
    :return: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ [–î–∞—Ç–∞, –ú–∞—Å—Å–∞, –°–ª–æ–∂–Ω–æ—Å—Ç—å, –û–±—â–∏–µ —á–∞—Å—ã]
    """
    if not isinstance(title_id, int) or title_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `title_id`, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

    try:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        modeling_query = (
            db.query(
                models.ModelingData.date,
                (func.sum(models.ModelingData.total_mass)).label("total_mass"),
                (func.sum(models.ModelingData.total_complexity) / func.count(models.ModelingData.total_complexity)).label("avg_complexity")
            )
            .join(models.Title, models.ModelingData.title_id == models.Title.id)
            .filter(models.ModelingData.title_id == title_id)  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ—à–∏–±–∫–∞ —Å `DrawingData`
            .group_by(models.ModelingData.date)
            .order_by(models.ModelingData.date)
        )
        modeling_result = modeling_query.all()

        # –ó–∞–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—á–∏–º —á–∞—Å–∞–º
        work_hours_query = (
            db.query(
                models.WorkHoursInTekla.date,
                func.sum(models.WorkHoursInTekla.hours_worked).label("total_hours")
            )
            .filter(models.WorkHoursInTekla.title_id == title_id)
            .group_by(models.WorkHoursInTekla.date)
        )
        work_hours_result = work_hours_query.all()

        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame
        modeling_df = pd.DataFrame(modeling_result, columns=["–î–∞—Ç–∞", "–ú–∞—Å—Å–∞", "–°–ª–æ–∂–Ω–æ—Å—Ç—å"])
        work_hours_df = pd.DataFrame(work_hours_result, columns=["–î–∞—Ç–∞", "–û–±—â–∏–µ —á–∞—Å—ã"])

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
        modeling_df["–î–∞—Ç–∞"] = pd.to_datetime(modeling_df["–î–∞—Ç–∞"], errors="coerce")
        work_hours_df["–î–∞—Ç–∞"] = pd.to_datetime(work_hours_df["–î–∞—Ç–∞"], errors="coerce")

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
        result_df = pd.merge(modeling_df, work_hours_df, on="–î–∞—Ç–∞", how="left").fillna(0)

        # –†–∞—Å—Å—á—ë—Ç –ø–ª–∞–Ω–æ–≤–æ–π –º–∞—Å—Å—ã
        result_df["–ü–ª–∞–Ω–æ–≤–∞—è –º–∞—Å—Å–∞"] = result_df["–û–±—â–∏–µ —á–∞—Å—ã"] / 1.4

        if result_df.empty:
            print("‚ö†Ô∏è DataFrame –ø—É—Å—Ç!")

        return result_df

    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        db.rollback()  # –û—Ç–∫–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None
    finally:
        db.close()  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        
        
def get_completed_mass_for_project_mod(db: Session, title_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –º–∞—Å—Å—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞.
    
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
    :param title_id: ID —Ç–∏—Ç—É–ª–∞
    :return: –°—É–º–º–∞—Ä–Ω–∞—è –º–∞—Å—Å–∞
    """
    if not isinstance(title_id, int) or title_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `title_id`, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

    try:
        # üîπ –ó–∞–ø—Ä–æ—Å —Å—É–º–º–∞—Ä–Ω–æ–π –º–∞—Å—Å—ã –∏–∑ `ModelingData`
        completed_mass_query = (
            db.query(
                func.coalesce(func.sum(models.ModelingData.total_mass), 0).label("completed_mass")
            )
            .join(models.Title, models.ModelingData.title_id == models.Title.id)
            .filter(models.ModelingData.title_id == title_id)
        )
        completed_mass_result = completed_mass_query.one_or_none()
        # print("completed_mass_result = ", completed_mass_result)

        # üîπ –ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–æ–≤–æ–π –º–∞—Å—Å—ã –∏–∑ `Title`
        title_plan_mass_query = (
            db.query(func.coalesce(models.Title.initial_mass, 0).label("initial_mass"))
            .filter(models.Title.id == title_id)
        )
        title_plan_mass_result = title_plan_mass_query.one_or_none()

        # üìå –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        completed_mass = completed_mass_result.completed_mass if completed_mass_result else 0
        initial_mass = title_plan_mass_result.initial_mass if title_plan_mass_result else 0

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `completed_mass`
        if completed_mass <= 0:
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: `completed_mass` –¥–ª—è —Ç–∏—Ç—É–ª–∞ {title_id} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({completed_mass})")
        
        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `initial_mass`
        if initial_mass <= 0:
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: `initial_mass` –¥–ª—è —Ç–∏—Ç—É–ª–∞ {title_id} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({initial_mass})")

        # üìå –ï—Å–ª–∏ –æ–±–µ –º–∞—Å—Å—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `0`
        if completed_mass <= 0 and initial_mass <= 0:
            return 0, 0

        return completed_mass, initial_mass  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è

    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        db.rollback()
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None
    finally:
        db.close()
        
        
def get_completed_mass_for_project_dr(db: Session, title_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—É—é –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –º–∞—Å—Å—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–∏—Ç—É–ª–∞.
    
    :param db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLAlchemy
    :param title_id: ID —Ç–∏—Ç—É–ª–∞
    :return: –°—É–º–º–∞—Ä–Ω–∞—è –º–∞—Å—Å–∞
    """
    if not isinstance(title_id, int) or title_id <= 0:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `title_id`, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")

    try:
        # üîπ –ó–∞–ø—Ä–æ—Å —Å—É–º–º–∞—Ä–Ω–æ–π –º–∞—Å—Å—ã –∏–∑ `DrawingData`
        completed_mass_query = (
            db.query(
                func.coalesce(func.sum(models.DrawingData.total_mass), 0).label("completed_mass")
            )
            .join(models.Title, models.DrawingData.title_id == models.Title.id)
            .filter(models.DrawingData.title_id == title_id)
        )
        completed_mass_result = completed_mass_query.one_or_none()
        print("completed_mass_result = ", completed_mass_result)

        # üîπ –ó–∞–ø—Ä–æ—Å –ø–ª–∞–Ω–æ–≤–æ–π –º–∞—Å—Å—ã –∏–∑ `Title`
        title_plan_mass_query = (
            db.query(func.coalesce(models.Title.initial_mass, 0).label("initial_mass"))
            .filter(models.Title.id == title_id)
        )
        title_plan_mass_result = title_plan_mass_query.one_or_none()

        # üìå –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        completed_mass = completed_mass_result.completed_mass if completed_mass_result else 0
        initial_mass = title_plan_mass_result.initial_mass if title_plan_mass_result else 0

        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `completed_mass`
        if completed_mass <= 0:
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: `completed_mass` –¥–ª—è —Ç–∏—Ç—É–ª–∞ {title_id} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({completed_mass})")
        
        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ `initial_mass`
        if initial_mass <= 0:
            print(f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: `initial_mass` –¥–ª—è —Ç–∏—Ç—É–ª–∞ {title_id} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω ({initial_mass})")

        # üìå –ï—Å–ª–∏ –æ–±–µ –º–∞—Å—Å—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `0`
        if completed_mass <= 0 and initial_mass <= 0:
            return 0, 0

        return completed_mass, initial_mass  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è

    except SQLAlchemyError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
        db.rollback()
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None
    finally:
        db.close()
